#include <iostream>
#include <stack>
/*
4개의 기호 ‘(’, ‘)’, ‘[’, ‘]’를 이용해서 만들어지는 괄호열 중에서 올바른 괄호열이란 다음과 같이 정의된다.
한 쌍의 괄호로만 이루어진 ‘()’와 ‘[]’는 올바른 괄호열이다.
만일 X가 올바른 괄호열이면 ‘(X)’이나 ‘[X]’도 모두 올바른 괄호열이 된다.
X와 Y 모두 올바른 괄호열이라면 이들을 결합한 XY도 올바른 괄호열이 된다.
예를 들어 ‘(()[[]])’나 ‘(())[][]’ 는 올바른 괄호열이지만 ‘([)]’ 나 ‘(()()[]’ 은 모두 올바른 괄호열이 아니다. 
우리는 어떤 올바른 괄호열 X에 대하여 그 괄호열의 값(괄호값)을 아래와 같이 정의하고 값(X)로 표시한다.
‘()’ 인 괄호열의 값은 2이다.
‘[]’ 인 괄호열의 값은 3이다.
‘(X)’ 의 괄호값은 2×값(X) 으로 계산된다.
‘[X]’ 의 괄호값은 3×값(X) 으로 계산된다.
올바른 괄호열 X와 Y가 결합된 XY의 괄호값은 값(XY)= 값(X)+값(Y) 로 계산된다.
예를 들어 ‘(()[[]])([])’ 의 괄호값을 구해보자. ‘()[[]]’ 의 괄호값이 2 + 3×3=11 이므로 ‘(()[[]])’의 괄호값은 2×11=22 이다.
그리고 ‘([])’의 값은 2×3=6 이므로 전체 괄호열의 값은 22 + 6 = 28 이다.
여러분이 풀어야 할 문제는 주어진 괄호열을 읽고 그 괄호값을 앞에서 정의한대로 계산하여 출력하는 것이다.

첫째 줄에 괄호열을 나타내는 문자열(스트링)이 주어진다. 단 그 길이는 1 이상, 30 이하이다.

백준 쇠막대기와 비슷한 유형
num을 따로 빼주는 방식
+를 따로 계산한는 것이 아닌 num변수를 따로 빼주고 각 수를 곱해가면 
pop할 때 알아서 더할 수 있다

*/

using namespace std;


int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	stack <char> stack;
	string str;
	int ans = 0;
	int num = 1; //곱하기 로직이 실행되기 때문에 1로 초기화
	cin >> str;
	for (int i = 0; i < str.length(); i++)
	{
		if (str[i] == '(') {
			num *= 2; // 여는 소괄호가 나오면 곱해질 값이 2가 증가한다
			stack.push(str[i]);
		}
		else if (str[i] == '[') {
			num *= 3; // 여는 대괄호의 경우 곱해질 값이 3 이 증가
			stack.push(str[i]);
		}
		else if (str[i] == ')') {
			if (stack.empty() || stack.top() != '('){ // 괄호가 완전하지 못한경우	
				cout << "0" << "\n";
				return 0;
			} 
			if (str[i - 1] == '(')  // 괄호 닫기 직전 문자열이 닫는 소괄호일 경우
				ans += num;         // 해당 괄호의 처리가 끝났으므로 num 값을 더함
			stack.pop(); 
			num /= 2; //소괄호 쌍이 사라졌으니 => 소괄호가 풀렸으니 2로 나눔
		} 
		else {
			if (stack.empty() || stack.top() != '[') { // 괄호가 완전하지 못한경우	
				cout << "0" << "\n";
				return 0;
			}
			if (str[i - 1] == '[') ans += num;
			stack.pop();
			num /= 3;
		}
	}
	if (!stack.empty()) 
		cout << "0";
	else 
		cout << ans << "\n";
}
